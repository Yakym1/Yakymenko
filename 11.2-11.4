# Task 11.2 #




#include <stdio.h>

#include <string.h>

#include <ctype.h>




#include "files_work.h"







int write_doubles_to_file(FILE* fp){

    double x;

    int cnt = 0;

    char c;

    while (1) {

        printf("input another real?y/n");

        c = (char) getchar();

        c = tolower(c);




        while (c!='y' && c!='n') {

            printf("Yes Or No?y/n");

            c = (char) getchar();

            c = tolower(c);

        }

        if(c=='n')break;

        printf("x=");

        scanf("%lf", &x);

        fwrite(&x, sizeof(x), 1, fp);

    }

    return cnt;

}




int read_doubles_from_file(FILE* fp){

    double x;

    int cnt = 0;

    do {

        int r = fread(&x, sizeof(x), 1, fp);

        if (r!=1) break;

        printf("%f", x);

        cnt++;

    } while (1);




    return cnt;

}




int transfer_doubles_less(FILE* F, FILE* G, double a){

    double x;




    do {

        int r = fread(&x, sizeof(x), 1, F);

        if (r!=1) break;

        if (x<a) {

            fwrite(&x, sizeof(x), 1, G);

        }

    } while (1);




    return 0;

}




int exclude_less(FILE* F, double a){

//    freopen(F, "rb");

    FILE* ftmp = fopen("temp_file.dat", "wb");

    double x;




    do {

        int r = fread(&x, sizeof(x), 1, F);

        if (r!=1) break;

        if (x>=a) {

            fwrite(&x, sizeof(x), 1, ftmp);

        }

    } while (1);




//    fclose(F);

    fclose(ftmp);




    return 0;

}



















int main(){




    char fname[] = "F.dat";

    char gname[] = "G.dat";

    FILE* F = fopen(fname,"wb");

    if (F==NULL){

        printf("error");

        return -1;

    }

    write_doubles_to_file(F);

    fclose(F);

    F = fopen(fname, "rb");




//    freopen(fname, "rb", F);

    if(F==NULL){

        printf("error2");

        return -2;

    }




    FILE* G = fopen(gname,"wb");

    if(G==NULL){

        printf("error3");

        return -3;

    }




    double a;

    printf("a=");

    scanf("%lf", &a);

    transfer_doubles_less(F,G,a);

    fclose(G);

    fclose(F);

    F = fopen(fname, "rb");

//    freopen(gname, "rb", G);

    printf("F=");

    read_doubles_from_file(F);

    

    printf("\n");

    printf("G=");

    G = fopen(gname, "rb");

    read_doubles_from_file(G);

    printf("\n");

    fclose(F);

    fclose(G);

    F = fopen(fname, "rb");

    exclude_less(F, a);

    fclose(F);

    rename("temp_file.dat", fname);

    F = fopen(fname, "rb");

    read_doubles_from_file(F);

    printf("\n");

    fclose(F);

//    fclose(G);




}














#include <stdio.h>

#include <stdlib.h>







typedef struct {

    int num;

    double x1, y1;

    double x2, y2;

} Rect;







int inpRect(Rect* x){

    printf("n=");

    scanf("%d", &x->num);

    printf("A(x,y):");

    scanf("%lf %lf", &x->x1, &x->y1);

    printf("C(x,y):");

    scanf("%lf %lf", &x->x2, &x->y2);

    return EXIT_SUCCESS;

}







void outRect(Rect x){

    printf("N %d : (%g, %g) - (%g, %g)\n", x.num, x.x1, x.y1, x.x2, x.y2);

}







double areaRect(Rect x){

    return (x.x2 - x.x1)*(x.y2 - x.y1);

}







int writeRectsToFile(const char* fname){

    FILE* fp = fopen(fname, "wb");

    int n;

    printf("n=");

    scanf("%d", &n);

    Rect rect;

    for (int i=0; i<n; i++) {

        inpRect(&rect);

        fwrite(&rect, sizeof(rect), 1, fp);

    }

    fclose(fp);

    return n;

}







int findMaxRect(const char* fname){

    FILE* fp = fopen(fname, "rb");

    int n;




    Rect rect;

    Rect maxRect;

    double maxArea = 0;

    for (;!feof(fp);) {

        

        int r = fread(&rect, sizeof(rect), 1, fp);

        if (r!=1) {

            break;

            

        }

        

        double a = areaRect(rect);

        if (maxArea<a) {

            maxArea = a;

            maxRect = rect;

        }

    }

    outRect(maxRect);

    

    fclose(fp);

    return maxRect.num;

}







int deleteRect(const char* fname, int num){

    

    FILE* fp = fopen(fname, "rb");

    FILE* fg = fopen("temp.dat", "wb");

    int n = -1;

    

    Rect rect;

    int index = 0;

    for (;!feof(fp);){

        

        int r = fread(&rect, sizeof(rect), 1, fp);

        if (r!=1) {

            break;

        }

        if (rect.num == num) {

            n = index;

        }

        else{

            fwrite(&rect, sizeof(rect), 1, fg);

        }

        index++;

    }

    fclose(fp);

    fclose(fg);




    if (n==-1) {

        remove("temp.dat");

        return -1;

    }

    rename("temp.dat", fname);

    return 0;

}







int changeRect(const char* fname, int num, Rect r){

    

    FILE* fp = fopen(fname, "ab");

//    FILE* fg = fopen("temp.dat", "wb");

    int n = -1;

    

    Rect rect;

    int index = 0;

    for (;!feof(fp);){

        

        int r = fread(&rect, sizeof(rect), 1, fp);

        if (r!=1) {

            break;

        }

        if (rect.num == num) {

            n = index;

        }

        else{

            ;

        }

        index++;

    }




    if (n==-1) {

        remove("temp.dat");

        return -1;

    }

    fseek(fp, sizeof(rect)*n, SEEK_SET);

    fwrite(&r, sizeof(rect), 1, fp);

    fclose(fp);

    return 0;

}




# Task 11.4 #


int main(){

    writeRectsToFile("r1.dat");

    findMaxRect("r1.dat");

    

    deleteRect("r1.dat", 1);

    Rect x;

    inpRect(&x);

    changeRect("r1.dat", 2, x);

}
