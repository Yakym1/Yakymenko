/* task 10.1 */




#include <stdio.h>

#include <stdlib.h>




//a

struct Date{

    unsigned day;

    unsigned month;

    int year;

};







//b

struct ChessField{

    char v;

    unsigned char h;

};







//c




//struct Vertex{

//    float x, y;

//};




typedef struct {

    float x, y;     //координати

} Vertex;




//struct Rectangle{

//    struct Vertex A;

//    struct Vertex B;

//}




typedef struct {

    Vertex A;

    Vertex B;

} Rectangle;







//d

typedef struct {

    size_t n;

    double* a; //coefficients P(x) = a_0 + a_1* x + ...+ a_n*x^n

}Polynome;










int inputRectangle(Rectangle* r){

    printf("A(x,y):");

    scanf("%f %f", &(r->A.x), &(r->A.y));

    printf("B(x,y):");

    scanf("%f %f", &(r->B.x), &(r->B.y));

    return EXIT_SUCCESS;

}







void outputRectangle(Rectangle r){

    printf("A(%f, %f) - B(%f, %f)", r.A.x, r.A.y, r.B.x, r.B.y);

}







int main(){

    Rectangle r;

    inputRectangle(&r);

    outputRectangle(r);

}















/* task 10.2 */




#include <stdio.h>

#include <stdlib.h>

#include <stdbool.h>




struct ChessField{

    char h;

    unsigned char v;

};




int inputChessField(struct ChessField * cf) {

    printf("\nH:");

    scanf("%c", &(cf->h));

    printf("V:");

    scanf("%hhu",&(cf->v));




    if(cf->v>8 || cf->v==0) return 1;

    if(cf->h<'a' || cf->h>'h') return 2;

    return 0;

}




void outputChessField(struct ChessField cf){

    printf("%c%hhu:",cf.h, cf.v);

}







//bool inputChessField(struct ChessField * cf) {

//    printf("\nH:");

//    scanf("%c", &(cf->h));

//    printf("V:");

//    scanf("%hhu",&(cf->v));

//

//    if(cf->v>8 || cf->v==0) return false;

//    if(cf->h<'a' || cf->h>'h') return false;

//    return true;

//}

//

//void outputChessField(struct ChessField cf){

//    printf("%c%hhu:",cf.h, cf.v);

//}







int main(){

    struct ChessField w1, w2;

    if (inputChessField(&w1)) {

        outputChessField(w1);

    };

    if (inputChessField(&w2)) {

        outputChessField(w2);

    };

}
